{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"CMSIS Solution Extension Thank you for using the CMSIS Solution extension that provides GUI tools in Visual Studio Code for project creation and build of embedded applications that utilize software packs . Various compilation tools are supported. Manual Chapters Setup explains the setup of the CMSIS Solution extension along with a build environment for embedded applications that are based on Arm Cortex-M processors. Quick start shows the most important features of the IDE. Create an embedded project explains how to start projects from scratch. Manage software components shows how to add and remove software components in a solution. Manage settings illustrates how to set the context of a solution. Build a project demonstrates how to build your project. Flash the application guides you through the download process. Debug a project explains how to debug your project. Configuration shows how to manage settings required for the CMSIS Solution extension. Run external tools describes the usage of external tools, such as debuggers and flash programmers. Tips and tricks help you to solve certain problems that may arise when working with the CMSIS Solution extension. Revision History Version Description 1.48.0 Initial release for CMSIS Solution extension 1.48.0","title":"Home"},{"location":"index.html#cmsis-solution-extension","text":"Thank you for using the CMSIS Solution extension that provides GUI tools in Visual Studio Code for project creation and build of embedded applications that utilize software packs . Various compilation tools are supported.","title":"CMSIS Solution Extension"},{"location":"index.html#manual-chapters","text":"Setup explains the setup of the CMSIS Solution extension along with a build environment for embedded applications that are based on Arm Cortex-M processors. Quick start shows the most important features of the IDE. Create an embedded project explains how to start projects from scratch. Manage software components shows how to add and remove software components in a solution. Manage settings illustrates how to set the context of a solution. Build a project demonstrates how to build your project. Flash the application guides you through the download process. Debug a project explains how to debug your project. Configuration shows how to manage settings required for the CMSIS Solution extension. Run external tools describes the usage of external tools, such as debuggers and flash programmers. Tips and tricks help you to solve certain problems that may arise when working with the CMSIS Solution extension.","title":"Manual Chapters"},{"location":"index.html#revision-history","text":"Version Description 1.48.0 Initial release for CMSIS Solution extension 1.48.0","title":"Revision History"},{"location":"build.html","text":"Build a project Before you can download the application onto your target device, you need to build it. There are various ways to trigger a build. From the Explorer view In the Explorer view , right-click the *.csolution.yml file and select Build solution . These options are also available in the right-click menu: Rebuild solution : cleans the output directories before building the cproject. Clean all out and tmp directories : cleans the output and tmp directories for the active solution. From the CMSIS view In the header, click . The Clean all out and tmp directories and Rebuild solution options are also available with . You can configure a build task in a tasks.json file to customize the behavior of the build button. All the examples on keil.arm.com include a tasks.json file. See Configure a build task for more details. Build output Once you initiated the build process, a Terminal window opens that shos the build operation: Check the output to find where the ELF file ( .axf ) was generated. Note If the build fails with an ENOENT error, follow the instructions in the pop-up message that displays in the bottom right-hand corner for installing CMSIS-Toolbox.","title":"Build a project"},{"location":"build.html#build-a-project","text":"Before you can download the application onto your target device, you need to build it. There are various ways to trigger a build.","title":"Build a project"},{"location":"build.html#from-the-explorer-view","text":"In the Explorer view , right-click the *.csolution.yml file and select Build solution . These options are also available in the right-click menu: Rebuild solution : cleans the output directories before building the cproject. Clean all out and tmp directories : cleans the output and tmp directories for the active solution.","title":"From the Explorer view"},{"location":"build.html#from-the-cmsis-view","text":"In the header, click . The Clean all out and tmp directories and Rebuild solution options are also available with . You can configure a build task in a tasks.json file to customize the behavior of the build button. All the examples on keil.arm.com include a tasks.json file. See Configure a build task for more details.","title":"From the CMSIS view"},{"location":"build.html#build-output","text":"Once you initiated the build process, a Terminal window opens that shos the build operation: Check the output to find where the ELF file ( .axf ) was generated. Note If the build fails with an ENOENT error, follow the instructions in the pop-up message that displays in the bottom right-hand corner for installing CMSIS-Toolbox.","title":"Build output"},{"location":"configuration.html","text":"Configuration Configure the extension Press CTRL+, ( CMD+, on macOS) or go to at the bottom of the Activity Bar and select Settings . Then, select CMSIS Solution to change the extension settings. The available settings are: Setting Description Actions Set run and debug configurations for your solutions and projects. Download Packs The CMSIS-Toolbox downloads required software packs using packget during setup and project build. This option enables the option --packs for cbuild . Exclude Configure a glob pattern for excluding files and folders in searches for solution files. Experimental Features Use the checkbox to enable experimental features. Generate Clang Setup Use the checkbox to automatically generate the required setup (clangd file and .vscode/settings.json ) for the active solution context. For AC6 compiler, include pre-defined macros in the clangd file. Use Web Services Use the checkbox to enable web services for obtaining information about devices, boards, and examples. If enabled, information from the Internet and locally installed packs is used. If disabled, only information from installed packs is used. Configure a solution If you have not already set a compiler, select a compiler for your solution from the Configure Solution view. If you created a reference application from a reference example, you can also add layers to your solution from the same view. If your project has a select-compiler: node, but no compiler: node is set in the csolution.yml file, or if your reference application has no layers defined, then the Configure Solution view opens automatically. If you are working with a reference application, Add Software Layer displays, showing the software layers that you can use. Layers are available from the CMSIS-Packs installed on your machine. Note Not all Board Support Packs (BSPs) have board layers. Not all layers are compatible with the connections that your reference application requires. The CMSIS-Packs which contain reference applications and layers generally provide an Overview.md file where the connections are detailed. If there are no compatible layers, errors display. Click Next to display the different options available. You can indicate where the layers should be copied to in the Board-Layer , Shield-Layer , and Socket-Layer fields. Click Default to reset the paths to their default values. If no compiler is set for the reference application, Select Compiler displays under the layers selection and shows the compilers available in your environment. Select a compiler. For example, AC6 or GCC. If you are working with another solution type, only Select Compiler displays. Select a compiler. Click OK . For reference applications only, a Board.clayer.yml file, a Shield.clayer.yml file, or a Socket.clayer.yml file, along with other files that make up the layer, are added in the folders that you selected. The files are available from the Explorer view. The .clayer.yml files come from the CMSIS-Pack. Layers are automatically added in the csolution.yml file of your solution under target-types: variables: for the active target. For all solution types, the compiler is added with the compiler: key in the csolution.yml file. Configure a build task In Visual Studio Code, you can automate certain tasks by configuring a tasks.json file. See Integrate with External Tools via Tasks for more details. With the CMSIS Solution extension, you can configure a build task using the tasks.json file to build your projects. When you run the build task, the extension runs cbuild with the options that you defined. Note The examples on keil.arm.com include a tasks.json file that already contains some configuration settings to build your project. You can modify the default configuration if needed. If you are working with an example that does not have a build task configured, follow these steps: Go to Terminal > Configure Tasks... . In the drop-down list that opens at the top of the window, select the CMSIS Build task. A tasks.json file opens with the default configuration. Modify the configuration. With IntelliSense, you can see the full set of task properties and values available in the tasks.json file. You can bring up suggestions using Trigger Suggest from the Command Palette . You can also display the task properties specific to cbuild by typing cbuild --help in the Terminal . Save the tasks.json file. Alternatively, you can define a default build task using Terminal > Configure Default Build Task... . The Terminal > Run Build Task... option triggers the execution of default build tasks.","title":"Configuration"},{"location":"configuration.html#configuration","text":"","title":"Configuration"},{"location":"configuration.html#configure-the-extension","text":"Press CTRL+, ( CMD+, on macOS) or go to at the bottom of the Activity Bar and select Settings . Then, select CMSIS Solution to change the extension settings. The available settings are: Setting Description Actions Set run and debug configurations for your solutions and projects. Download Packs The CMSIS-Toolbox downloads required software packs using packget during setup and project build. This option enables the option --packs for cbuild . Exclude Configure a glob pattern for excluding files and folders in searches for solution files. Experimental Features Use the checkbox to enable experimental features. Generate Clang Setup Use the checkbox to automatically generate the required setup (clangd file and .vscode/settings.json ) for the active solution context. For AC6 compiler, include pre-defined macros in the clangd file. Use Web Services Use the checkbox to enable web services for obtaining information about devices, boards, and examples. If enabled, information from the Internet and locally installed packs is used. If disabled, only information from installed packs is used.","title":"Configure the extension"},{"location":"configuration.html#configure-a-solution","text":"If you have not already set a compiler, select a compiler for your solution from the Configure Solution view. If you created a reference application from a reference example, you can also add layers to your solution from the same view. If your project has a select-compiler: node, but no compiler: node is set in the csolution.yml file, or if your reference application has no layers defined, then the Configure Solution view opens automatically. If you are working with a reference application, Add Software Layer displays, showing the software layers that you can use. Layers are available from the CMSIS-Packs installed on your machine. Note Not all Board Support Packs (BSPs) have board layers. Not all layers are compatible with the connections that your reference application requires. The CMSIS-Packs which contain reference applications and layers generally provide an Overview.md file where the connections are detailed. If there are no compatible layers, errors display. Click Next to display the different options available. You can indicate where the layers should be copied to in the Board-Layer , Shield-Layer , and Socket-Layer fields. Click Default to reset the paths to their default values. If no compiler is set for the reference application, Select Compiler displays under the layers selection and shows the compilers available in your environment. Select a compiler. For example, AC6 or GCC. If you are working with another solution type, only Select Compiler displays. Select a compiler. Click OK . For reference applications only, a Board.clayer.yml file, a Shield.clayer.yml file, or a Socket.clayer.yml file, along with other files that make up the layer, are added in the folders that you selected. The files are available from the Explorer view. The .clayer.yml files come from the CMSIS-Pack. Layers are automatically added in the csolution.yml file of your solution under target-types: variables: for the active target. For all solution types, the compiler is added with the compiler: key in the csolution.yml file.","title":"Configure a solution"},{"location":"configuration.html#configure-a-build-task","text":"In Visual Studio Code, you can automate certain tasks by configuring a tasks.json file. See Integrate with External Tools via Tasks for more details. With the CMSIS Solution extension, you can configure a build task using the tasks.json file to build your projects. When you run the build task, the extension runs cbuild with the options that you defined. Note The examples on keil.arm.com include a tasks.json file that already contains some configuration settings to build your project. You can modify the default configuration if needed. If you are working with an example that does not have a build task configured, follow these steps: Go to Terminal > Configure Tasks... . In the drop-down list that opens at the top of the window, select the CMSIS Build task. A tasks.json file opens with the default configuration. Modify the configuration. With IntelliSense, you can see the full set of task properties and values available in the tasks.json file. You can bring up suggestions using Trigger Suggest from the Command Palette . You can also display the task properties specific to cbuild by typing cbuild --help in the Terminal . Save the tasks.json file. Alternatively, you can define a default build task using Terminal > Configure Default Build Task... . The Terminal > Run Build Task... option triggers the execution of default build tasks.","title":"Configure a build task"},{"location":"create_app.html","text":"Create an embedded project This chapter explains how to create a CMSIS solution-based application. Create new solution In the CMSIS view, click Create a New Solution to open the Create Solution view. Note If you already have a solution opened in your workspace and want to create a new one in the same workspace, move your cursor over the three dots ... in the CMSIS view, then Create new solution . Click the Target Board drop-down list. Enter a search term, and then select a board. The details of the board that you selected are shown. Click Select . By default, the Target Device drop-down list and Target Type field show the name of the device mounted on the board that you selected. In the Target Type field, you can customize the name of the target that is used to deploy the solution. This is displayed in the Manage Solution view and added to the target-types: section of the <solution_name>.csolution.yml file. Note Alternatively, you can directly select a device in the Target Device drop-down list, without selecting a board first. Select a template, reference application, or example Depending on the board or device you have chosen, select one of the following options from the drop-down list. If there are too many examples, enter a search term and then select an example. Templates Templates help you getting started without application-specific code. Blank solution : starts a project from scratch with an empty main.c file and the CMSIS device startup component selected. TrustZone solution : If the board or device that you selected is compatible, you can use TrustZone, and define whether projects in the solution use secure or non-secure zones. Reference Applications Reference applications show the usage of middleware, software libraries, and custom code that can run on many different target hardware boards. Examples display only if you selected a board and a software layer is available for the board. Reference applications are not dependent on specific hardware. You can deploy them to various evaluation boards using additional software layers that provide driver APIs for specific target hardware. Layers are provided using CMSIS-Packs. Reference applications are available with the MDK-Middleware . These examples show you how to use software components for IPv4 and IPv6 networking, USB Host and Device communication, and file system for data storage. See MDK Middleware Reference Applications and the MDK-Middleware repository and documentation for more details. Other reference applications that illustrate how to match sensor shields and boards are also available with the Sensor SDK pack. The examples use board and shield layers. See Sensor Reference Applications and the Sensor-SDK-Example repository for more details. Reference applications that use socket layers are also available. See the AWS MQTT demo as an example. Csolution Examples Use a CMSIS solution example. CMSIS solution examples are targeted at a specific board or Fixed Virtual Platform (FVP) model. The examples are fully configured and ready for use. \u00b5Vision Examples Use a \u00b5Vision example in *.uvprojx format as a starting point. \u00b5Vision examples are converted automatically. Project Name Once you have selected your solution template, you need to specify a Project Name . If you selected Blank solution or TrustZone solution , one project for each processor is automatically added (in case of TrustZone a secure and a non-secure project)). You can: change the project names. remove projects. decide to add secure or non-secure zones with the TrustZone drop-down list if the board or device is compatible. By default, TrustZone is off . Click Add Project to add projects to your solution and configure them. For TrustZone, you can add as many secure or non-secure projects as you need for a particular processor. Solution Name In the Solution Name field, you can change the name for your solution. This will be used as the SolutionName.csolution.yml file name. Solution Sub Folder In the Solution Sub Folder field, you can change the name of the subfolder where the solution files are stored. Solution Folder Click Browse next to the Solution Base Folder field and choose where to store the solution subfolder using the system dialog box. With the Initialize Git repository checkbox, you can initialize the solution as a Git repository. Clear the checkbox if you do not want to turn your solution into a Git repository. Select the Show project opening options checkbox to decide where to open the solution. Click Create . The extension creates the solution and automatically converts examples that are available only in *.uvprojx format. If there are conversion errors, check the uv2csolution.log file. Missing CMSIS-Packs are installed automatically. The following files are created for the solution: A <solution_name>.csolution.yml file. One or more <project_name>.cproject.yml files, each available in a separate folder. For reference applications only, each cproject.yml file contains a $Board-Layer$ variable. For reference applications with sensor shields, each cproject.yml file contains a $Shield-Layer$ variable. For reference applications with a socket layer, each cproject.yml file contains a $Socket-Layer$ variable. These variables are not yet defined. A main <filename>.c template file for each project. A vcpkg-configuration.json file to download required tools automatically. Attention If get this warning issued: Click Show output to configure the solution. You may add board, shield, or socket layers to your reference application. You can also select a compiler for reference applications and other solution types. Depending on the selected example, you might need to configure the solution before you can continue with building the project.","title":"Create an embedded project"},{"location":"create_app.html#create-an-embedded-project","text":"This chapter explains how to create a CMSIS solution-based application.","title":"Create an embedded project"},{"location":"create_app.html#create-new-solution","text":"In the CMSIS view, click Create a New Solution to open the Create Solution view. Note If you already have a solution opened in your workspace and want to create a new one in the same workspace, move your cursor over the three dots ... in the CMSIS view, then Create new solution . Click the Target Board drop-down list. Enter a search term, and then select a board. The details of the board that you selected are shown. Click Select . By default, the Target Device drop-down list and Target Type field show the name of the device mounted on the board that you selected. In the Target Type field, you can customize the name of the target that is used to deploy the solution. This is displayed in the Manage Solution view and added to the target-types: section of the <solution_name>.csolution.yml file. Note Alternatively, you can directly select a device in the Target Device drop-down list, without selecting a board first.","title":"Create new solution"},{"location":"create_app.html#select-a-template-reference-application-or-example","text":"Depending on the board or device you have chosen, select one of the following options from the drop-down list. If there are too many examples, enter a search term and then select an example.","title":"Select a template, reference application, or example"},{"location":"create_app.html#templates","text":"Templates help you getting started without application-specific code. Blank solution : starts a project from scratch with an empty main.c file and the CMSIS device startup component selected. TrustZone solution : If the board or device that you selected is compatible, you can use TrustZone, and define whether projects in the solution use secure or non-secure zones.","title":"Templates"},{"location":"create_app.html#reference-applications","text":"Reference applications show the usage of middleware, software libraries, and custom code that can run on many different target hardware boards. Examples display only if you selected a board and a software layer is available for the board. Reference applications are not dependent on specific hardware. You can deploy them to various evaluation boards using additional software layers that provide driver APIs for specific target hardware. Layers are provided using CMSIS-Packs. Reference applications are available with the MDK-Middleware . These examples show you how to use software components for IPv4 and IPv6 networking, USB Host and Device communication, and file system for data storage. See MDK Middleware Reference Applications and the MDK-Middleware repository and documentation for more details. Other reference applications that illustrate how to match sensor shields and boards are also available with the Sensor SDK pack. The examples use board and shield layers. See Sensor Reference Applications and the Sensor-SDK-Example repository for more details. Reference applications that use socket layers are also available. See the AWS MQTT demo as an example.","title":"Reference Applications"},{"location":"create_app.html#csolution-examples","text":"Use a CMSIS solution example. CMSIS solution examples are targeted at a specific board or Fixed Virtual Platform (FVP) model. The examples are fully configured and ready for use.","title":"Csolution Examples"},{"location":"create_app.html#vision-examples","text":"Use a \u00b5Vision example in *.uvprojx format as a starting point. \u00b5Vision examples are converted automatically.","title":"\u00b5Vision Examples"},{"location":"create_app.html#project-name","text":"Once you have selected your solution template, you need to specify a Project Name . If you selected Blank solution or TrustZone solution , one project for each processor is automatically added (in case of TrustZone a secure and a non-secure project)). You can: change the project names. remove projects. decide to add secure or non-secure zones with the TrustZone drop-down list if the board or device is compatible. By default, TrustZone is off . Click Add Project to add projects to your solution and configure them. For TrustZone, you can add as many secure or non-secure projects as you need for a particular processor.","title":"Project Name"},{"location":"create_app.html#solution-name","text":"In the Solution Name field, you can change the name for your solution. This will be used as the SolutionName.csolution.yml file name.","title":"Solution Name"},{"location":"create_app.html#solution-sub-folder","text":"In the Solution Sub Folder field, you can change the name of the subfolder where the solution files are stored.","title":"Solution Sub Folder"},{"location":"create_app.html#solution-folder","text":"Click Browse next to the Solution Base Folder field and choose where to store the solution subfolder using the system dialog box. With the Initialize Git repository checkbox, you can initialize the solution as a Git repository. Clear the checkbox if you do not want to turn your solution into a Git repository. Select the Show project opening options checkbox to decide where to open the solution. Click Create . The extension creates the solution and automatically converts examples that are available only in *.uvprojx format. If there are conversion errors, check the uv2csolution.log file. Missing CMSIS-Packs are installed automatically. The following files are created for the solution: A <solution_name>.csolution.yml file. One or more <project_name>.cproject.yml files, each available in a separate folder. For reference applications only, each cproject.yml file contains a $Board-Layer$ variable. For reference applications with sensor shields, each cproject.yml file contains a $Shield-Layer$ variable. For reference applications with a socket layer, each cproject.yml file contains a $Socket-Layer$ variable. These variables are not yet defined. A main <filename>.c template file for each project. A vcpkg-configuration.json file to download required tools automatically. Attention If get this warning issued: Click Show output to configure the solution. You may add board, shield, or socket layers to your reference application. You can also select a compiler for reference applications and other solution types. Depending on the selected example, you might need to configure the solution before you can continue with building the project.","title":"Solution Folder"},{"location":"debug.html","text":"Debug the application Debugging is an essential task for every embedded developer. You can debug your code on real hardware or on simulation models based on Fixed Virtual Platforms. Debugging hardware Check that your device is connected to your computer. To start a debug session, click in the Activity Bar . Select a debug configuration in the list . Click . Note If you are using a multicore device and you did not specify a \"processorName\" in the launch.json file, select the appropriate processor for your project in the Select a processor drop-down list at the top of the window. The Run and Debug view displays and the debug session starts. The debugger stops at the main() function of the program: The Debug Console tab displays the debugging output. Debugging with simulation models Fixed Virtual Platforms (FVPs) are complete simulations of an Arm system, including processor, memory and peripherals. These are set out in a \"programmer's view\", which gives you a comprehensive model on which to build and test your software. Note FVPs are natively available on Windows and Linux only. If you are on a Mac, follow this Learning Path to install Docker and clone the FVPs-on-Mac repository. Go to the Device Manager and select the FVP that you want to use. For example, MPS2 Cortex M4. To start a debug session, click and select the Arm Debugger FVP debug configuration in the list. Click Start Debugging. Troubleshooting If the Arm Debugger engine cannot be found on your machine, a dialog box appears: Select one of these options: To add Arm Debugger to your environment, click Install Arm Debugger . The vcpkg-configuration.json file is updated. To indicate the path to the Arm Debugger engine in the settings, click Configure Path .","title":"Debug a project"},{"location":"debug.html#debug-the-application","text":"Debugging is an essential task for every embedded developer. You can debug your code on real hardware or on simulation models based on Fixed Virtual Platforms.","title":"Debug the application"},{"location":"debug.html#debugging-hardware","text":"Check that your device is connected to your computer. To start a debug session, click in the Activity Bar . Select a debug configuration in the list . Click . Note If you are using a multicore device and you did not specify a \"processorName\" in the launch.json file, select the appropriate processor for your project in the Select a processor drop-down list at the top of the window. The Run and Debug view displays and the debug session starts. The debugger stops at the main() function of the program: The Debug Console tab displays the debugging output.","title":"Debugging hardware"},{"location":"debug.html#debugging-with-simulation-models","text":"Fixed Virtual Platforms (FVPs) are complete simulations of an Arm system, including processor, memory and peripherals. These are set out in a \"programmer's view\", which gives you a comprehensive model on which to build and test your software. Note FVPs are natively available on Windows and Linux only. If you are on a Mac, follow this Learning Path to install Docker and clone the FVPs-on-Mac repository. Go to the Device Manager and select the FVP that you want to use. For example, MPS2 Cortex M4. To start a debug session, click and select the Arm Debugger FVP debug configuration in the list. Click Start Debugging.","title":"Debugging with simulation models"},{"location":"debug.html#troubleshooting","text":"If the Arm Debugger engine cannot be found on your machine, a dialog box appears: Select one of these options: To add Arm Debugger to your environment, click Install Arm Debugger . The vcpkg-configuration.json file is updated. To indicate the path to the Arm Debugger engine in the settings, click Configure Path .","title":"Troubleshooting"},{"location":"flash.html","text":"Flash the application Attention First, check that your hardware is connected to your computer. Before you can start debugging the application, you need to download it to the flash of the target hardware. Notes When you have several solutions in one folder, Visual Studio Code ignores the tasks.json and launch.json files that you created for each solution. Instead, Visual Studio Code generates new JSON files at the root of the workspace in a .vscode folder and ignores the other JSON files. As a workaround, open one solution first, then add other solutions to your workspace with the File > Add Folder to Workspace option. If you are using a multicore device and you did not specify a \"processorName\" in the launch.json file, select the appropriate processor for your project in the Select a processor drop-down list at the top of the window. In the Solution outline header, click . To verify that the project has run correctly, check the Terminal tab: Troubleshooting If the Arm Debugger engine cannot be found on your machine, a dialog box appears: Select one of these options: To add Arm Debugger to your environment, click Install Arm Debugger . The vcpkg-configuration.json file is updated. To indicate the path to the Arm Debugger engine in the settings, click Configure Path .","title":"Flash the application"},{"location":"flash.html#flash-the-application","text":"Attention First, check that your hardware is connected to your computer. Before you can start debugging the application, you need to download it to the flash of the target hardware. Notes When you have several solutions in one folder, Visual Studio Code ignores the tasks.json and launch.json files that you created for each solution. Instead, Visual Studio Code generates new JSON files at the root of the workspace in a .vscode folder and ignores the other JSON files. As a workaround, open one solution first, then add other solutions to your workspace with the File > Add Folder to Workspace option. If you are using a multicore device and you did not specify a \"processorName\" in the launch.json file, select the appropriate processor for your project in the Select a processor drop-down list at the top of the window. In the Solution outline header, click . To verify that the project has run correctly, check the Terminal tab:","title":"Flash the application"},{"location":"flash.html#troubleshooting","text":"If the Arm Debugger engine cannot be found on your machine, a dialog box appears: Select one of these options: To add Arm Debugger to your environment, click Install Arm Debugger . The vcpkg-configuration.json file is updated. To indicate the path to the Arm Debugger engine in the settings, click Configure Path .","title":"Troubleshooting"},{"location":"installation.html","text":"Setup The Keil Studio Pack extension pack is a set of extensions that you can use to work with CMSIS solution projects. It also contains the CMSIS Solution extension. In Visual Studio Code, open the Extensions view and enter \"Keil Studio Pack\" in the search bar. Click the Install button to start the installation. Once finished, the CMSIS View icon appears on the activity bar. You can create your first application or download an example project to verify the correct operation of the IDE. Note If you do not wish to install the whole suite of extensions, you can install the CMSIS Solution extension standalone. In this case, search for \"CMSIS Solution\" Find an example project The CMSIS boards list contains many examples that can be used to verify the correct operation of the extension. The following demonstrates how to use an example based on the NXP FRDM-K32L3A6 development board . Please adapt to your development board. In your browser, open the CMSIS boards list . In the search bar, enter \"frdm-k32\" for example. Alternatively, you may search for a board using the filters Vendor and Core . In the list, click on FRDM-K32L3A6 . The board page opens on the Projects tab. This tab shows the list of available example projects. Enter \"hello\" in the search bar. Select Open in Keil Studio for VS Code in the Get Project drop-down to download and open the example directly to your computer. Visual Studio Code will ask for permissions to open the URI: Click Open . Next, select a download and unzip location. Finally, Visual Studio Code ask to open the unzipped folder, to open it in a new window, or to add it to the workspace. It is recommended to open the folder in a new window. Once opened, you can continue to build and debug the example project.","title":"Setup"},{"location":"installation.html#setup","text":"The Keil Studio Pack extension pack is a set of extensions that you can use to work with CMSIS solution projects. It also contains the CMSIS Solution extension. In Visual Studio Code, open the Extensions view and enter \"Keil Studio Pack\" in the search bar. Click the Install button to start the installation. Once finished, the CMSIS View icon appears on the activity bar. You can create your first application or download an example project to verify the correct operation of the IDE. Note If you do not wish to install the whole suite of extensions, you can install the CMSIS Solution extension standalone. In this case, search for \"CMSIS Solution\"","title":"Setup"},{"location":"installation.html#find-an-example-project","text":"The CMSIS boards list contains many examples that can be used to verify the correct operation of the extension. The following demonstrates how to use an example based on the NXP FRDM-K32L3A6 development board . Please adapt to your development board. In your browser, open the CMSIS boards list . In the search bar, enter \"frdm-k32\" for example. Alternatively, you may search for a board using the filters Vendor and Core . In the list, click on FRDM-K32L3A6 . The board page opens on the Projects tab. This tab shows the list of available example projects. Enter \"hello\" in the search bar. Select Open in Keil Studio for VS Code in the Get Project drop-down to download and open the example directly to your computer. Visual Studio Code will ask for permissions to open the URI: Click Open . Next, select a download and unzip location. Finally, Visual Studio Code ask to open the unzipped folder, to open it in a new window, or to add it to the workspace. It is recommended to open the folder in a new window. Once opened, you can continue to build and debug the example project.","title":"Find an example project"},{"location":"manage_components.html","text":"Manage software components The Software Components view shows all the software components selected in the active project of a solution. You can do the following: Modify the software components of the project. Manage the dependencies between components for each target type defined in your solution, or for all the target types at once. Software components view In the Solution outline, click Manage software components at the project level. The Software Components view opens: The default view displays the components available from the packs listed in your solution. Use the Search field to search the list of components. Layer icons indicate which components are used in layers. In the current version, layers are read-only, so you cannot select or clear them. Click the layer icon of a component to open the *.clayer.yml file or associated files. Learn more links are available for some components that open the related documentation. Modify the software components in your project You can add components from all the packs available, not just the packs that are already selected for a project. Modify the shown context In the Project drop-down list, select the project for which you want to modify software components. In the Target drop-down list, select a specific target type. If you want to modify all the target types at once, select All Targets . Note that you might have only one target. In the Software packs drop-down list, you can filter on the components available from the packs listed in your solution with the Solution: <Solution-name> option. You can display the components from all installed packs with the All installed packs option. Select components Check that the All toggle button is selected to display all the components available. Switch to Selected to display only the components that are already selected. Use the checkboxes to select or clear components as required. For some components, you can also select a vendor, variant, or version. The cproject.yml file is automatically updated. Validation Manage the dependencies between components and solve validation issues from the Validation panel. Issues are highlighted in red and have an exclamation mark icon next to them. You can remove conflicting components from your selection or add missing component dependencies from a suggested list. If there are validation issues, move your cursor over the issues in the Validation panel to get more details. Click the proposed fixes to find the components in the list. In some cases, you might have to choose between different fix sets. Select a fix set in the drop-down list, make the required component choices, and then click Apply . If a pack is missing in the solution, a \" Component's pack is not included in your solution \" message displays in the Validation panel. An error also displays in the Problems view. Install the pack with the cpackget command. There can also be issues such as: A component that you selected is incompatible with the selected hardware and toolchain. A component that you selected has dependencies which are incompatible with the selected hardware and toolchain. A component that you selected has unresolvable dependencies. In such cases, you must remove the component. Click Apply from the Validation panel.","title":"Manage software components"},{"location":"manage_components.html#manage-software-components","text":"The Software Components view shows all the software components selected in the active project of a solution. You can do the following: Modify the software components of the project. Manage the dependencies between components for each target type defined in your solution, or for all the target types at once.","title":"Manage software components"},{"location":"manage_components.html#software-components-view","text":"In the Solution outline, click Manage software components at the project level. The Software Components view opens: The default view displays the components available from the packs listed in your solution. Use the Search field to search the list of components. Layer icons indicate which components are used in layers. In the current version, layers are read-only, so you cannot select or clear them. Click the layer icon of a component to open the *.clayer.yml file or associated files. Learn more links are available for some components that open the related documentation.","title":"Software components view"},{"location":"manage_components.html#modify-the-software-components-in-your-project","text":"You can add components from all the packs available, not just the packs that are already selected for a project.","title":"Modify the software components in your project"},{"location":"manage_components.html#modify-the-shown-context","text":"In the Project drop-down list, select the project for which you want to modify software components. In the Target drop-down list, select a specific target type. If you want to modify all the target types at once, select All Targets . Note that you might have only one target. In the Software packs drop-down list, you can filter on the components available from the packs listed in your solution with the Solution: <Solution-name> option. You can display the components from all installed packs with the All installed packs option.","title":"Modify the shown context"},{"location":"manage_components.html#select-components","text":"Check that the All toggle button is selected to display all the components available. Switch to Selected to display only the components that are already selected. Use the checkboxes to select or clear components as required. For some components, you can also select a vendor, variant, or version. The cproject.yml file is automatically updated.","title":"Select components"},{"location":"manage_components.html#validation","text":"Manage the dependencies between components and solve validation issues from the Validation panel. Issues are highlighted in red and have an exclamation mark icon next to them. You can remove conflicting components from your selection or add missing component dependencies from a suggested list. If there are validation issues, move your cursor over the issues in the Validation panel to get more details. Click the proposed fixes to find the components in the list. In some cases, you might have to choose between different fix sets. Select a fix set in the drop-down list, make the required component choices, and then click Apply . If a pack is missing in the solution, a \" Component's pack is not included in your solution \" message displays in the Validation panel. An error also displays in the Problems view. Install the pack with the cpackget command. There can also be issues such as: A component that you selected is incompatible with the selected hardware and toolchain. A component that you selected has dependencies which are incompatible with the selected hardware and toolchain. A component that you selected has unresolvable dependencies. In such cases, you must remove the component. Click Apply from the Validation panel.","title":"Validation"},{"location":"manage_settings.html","text":"Manage solution settings In the Manage solution settings view you can set the context of your solution. The context set selects the target and defines projects and build types that are included in the application image. In the Solution outline, click Manage Solution Settings . The Manage Solutions view opens: You can change the Active Target type, the Active Projects included in the build. You can change the build type of a project. You can also change the run and debug configurations, or add new configurations. Active Target Select a Target Type to specify the hardware used to build the solution. Some examples are also compatible with Arm Virtual Hardware (AVH) targets, in which case more options are available. For more details, read the AVH solutions overview . Click Edit targets, build-types and project references in csolution.yml to specify your target types by editing the YAML file directly. Active Projects This section shows each project that is part of the solution. Use the checkbox to add a project to or to remove it from the context set. The Project Name is shown, but cannot be changed. Select a Build Type for each project. You can set different build types for different projects in your solution. Click Edit cproject.yml next to a project to open the <project-name>.cproject.yml file. YAML syntax support helps you with editing. Note The projects and build types you can select are defined by contexts for a particular target. Some options might be unavailable if they have been excluded for the target selected. To learn more about contexts and how to modify them, see the Context and Conditional build information in the CMSIS-Toolbox documentation. For example, you can use for-context and not-for-context to include or exclude target types at the project: level in the *.csolution.yml file. Run and Debug Choose a run configuration and a debug configuration to use for your solution. You may select different run and debug configurations for each project included in the solution. You can also: Move your mouse over an entry in the list and click the pen icon to edit an existing configuration with the visual editor: Click + Add new to add a new configuration. Errors and warnings You can inspect errors and warnings for a context set. For active projects in the context set, errors and warnings display when you move your cursor over the Context Set in the status bar. The indicator is red for errors and yellow in case of warnings. Click the indicator to open the Output tab for the CMSIS Solution category. If you previously closed the Manage Solution view, then this action also re-opens the view. You can also go to the Problems tab and check for errors. Open the main.c file and check the IntelliSense features available. To find out about the different features, read the Visual Studio Code documentation on IntelliSense .","title":"Manage settings"},{"location":"manage_settings.html#manage-solution-settings","text":"In the Manage solution settings view you can set the context of your solution. The context set selects the target and defines projects and build types that are included in the application image. In the Solution outline, click Manage Solution Settings . The Manage Solutions view opens: You can change the Active Target type, the Active Projects included in the build. You can change the build type of a project. You can also change the run and debug configurations, or add new configurations.","title":"Manage solution settings"},{"location":"manage_settings.html#active-target","text":"Select a Target Type to specify the hardware used to build the solution. Some examples are also compatible with Arm Virtual Hardware (AVH) targets, in which case more options are available. For more details, read the AVH solutions overview . Click Edit targets, build-types and project references in csolution.yml to specify your target types by editing the YAML file directly.","title":"Active Target"},{"location":"manage_settings.html#active-projects","text":"This section shows each project that is part of the solution. Use the checkbox to add a project to or to remove it from the context set. The Project Name is shown, but cannot be changed. Select a Build Type for each project. You can set different build types for different projects in your solution. Click Edit cproject.yml next to a project to open the <project-name>.cproject.yml file. YAML syntax support helps you with editing. Note The projects and build types you can select are defined by contexts for a particular target. Some options might be unavailable if they have been excluded for the target selected. To learn more about contexts and how to modify them, see the Context and Conditional build information in the CMSIS-Toolbox documentation. For example, you can use for-context and not-for-context to include or exclude target types at the project: level in the *.csolution.yml file.","title":"Active Projects"},{"location":"manage_settings.html#run-and-debug","text":"Choose a run configuration and a debug configuration to use for your solution. You may select different run and debug configurations for each project included in the solution. You can also: Move your mouse over an entry in the list and click the pen icon to edit an existing configuration with the visual editor: Click + Add new to add a new configuration.","title":"Run and Debug"},{"location":"manage_settings.html#errors-and-warnings","text":"You can inspect errors and warnings for a context set. For active projects in the context set, errors and warnings display when you move your cursor over the Context Set in the status bar. The indicator is red for errors and yellow in case of warnings. Click the indicator to open the Output tab for the CMSIS Solution category. If you previously closed the Manage Solution view, then this action also re-opens the view. You can also go to the Problems tab and check for errors. Open the main.c file and check the IntelliSense features available. To find out about the different features, read the Visual Studio Code documentation on IntelliSense .","title":"Errors and warnings"},{"location":"quickstart.html","text":"Quick start The CMSIS Solution is an extension for Visual Studio Code that offers a GUI for the underlying CMSIS-Toolbox project management and build tools. Together with other extensions provided by Arm and third parties, this results in a powerful embedded development environment. This quick start guide gives you an overview of the project management capabilities in the CMSIS view and shows how the status bar helps to understand the project and environment set up. Available commands You can access commands to manage your solution/project when you take the following actions: Directly from the CMSIS view. When you right-click the *.csolution.yml file from the Explorer view. When you click the context set status bar item . When press CTRL+Shift+P (CMD+Shift+P on MacOS). Command Description Manage Solution Settings Set a context for your solution Build solution Build the solution with the current context set Clean all out and tmp directories for the active solution Configure Solution Set compiler and add layers Convert \u00b5Vision project to CMSIS solution Convert uvprojx files to CMSIS solution format Create a Solution Start from scratch Debug the solution with the current context set Focus on Solution View Shows the CMSIS view Manage software components Review, add, and remove software components Rebuild solution Rebuild the solution with the current context set Refresh (reload packs, update RTE) Reload information from all installed packs and run cbuild setup update-rte Run Flash and run the solution on your target Run Generator Open generator program with the current target Select solution from workspace Set current solution if you have several of them in your workspace CMSIS View The CMSIS view ( ) shows the content of the active projects in the solution. Each project contains configuration settings, source code files, build settings, and other project-specific information. The extension uses these settings and files to manage and build a software project for a board or device. The main area shows: Groups and files are added to the project by the user. constructed-files contains generated files such as the RTE_Components.h header file for each context. linker contains a linker script file and a <regions>.h file (or other user-defined header files). Components shows the software components selected for the project with their source files, user code templates, and APIs. Click the files to open them in the editor. Click the book icon of a component to open the related documentation. If you are using a generator to configure your device or board, then a Run Generator option is available to start a generator session. Layer Type (if available): The software layers in the project with their source files, preconfigured software components, and configuration files. Status bar The Visual Studio Code status bar displays information about the status of your development environment and the project. Depending on the number of installed extensions, you see something like the following: If you have a development board attached, the connected hardware is shown via the Arm Device Manager extension. Click to open the extension. Using the Arm Debugger extension, the current debug configuration is displayed. You can inspect errors and warnings for a context set. For active projects in the context set, errors and warnings display when you move your cursor over the Context Set in the status bar. The indicator is red for errors and yellow in case of warnings. Click the indicator to open the Output tab for the CMSIS Solution category. If you previously closed the Manage Solution view, then this action also re-opens the view. The Arm Environment Manager extension shows information about the number of installed tools. Hover over to review the list. Click it to get further options. If you are using licensed Arm tools, the active license is shown. Click it to manage the license.","title":"Quick start"},{"location":"quickstart.html#quick-start","text":"The CMSIS Solution is an extension for Visual Studio Code that offers a GUI for the underlying CMSIS-Toolbox project management and build tools. Together with other extensions provided by Arm and third parties, this results in a powerful embedded development environment. This quick start guide gives you an overview of the project management capabilities in the CMSIS view and shows how the status bar helps to understand the project and environment set up.","title":"Quick start"},{"location":"quickstart.html#available-commands","text":"You can access commands to manage your solution/project when you take the following actions: Directly from the CMSIS view. When you right-click the *.csolution.yml file from the Explorer view. When you click the context set status bar item . When press CTRL+Shift+P (CMD+Shift+P on MacOS). Command Description Manage Solution Settings Set a context for your solution Build solution Build the solution with the current context set Clean all out and tmp directories for the active solution Configure Solution Set compiler and add layers Convert \u00b5Vision project to CMSIS solution Convert uvprojx files to CMSIS solution format Create a Solution Start from scratch Debug the solution with the current context set Focus on Solution View Shows the CMSIS view Manage software components Review, add, and remove software components Rebuild solution Rebuild the solution with the current context set Refresh (reload packs, update RTE) Reload information from all installed packs and run cbuild setup update-rte Run Flash and run the solution on your target Run Generator Open generator program with the current target Select solution from workspace Set current solution if you have several of them in your workspace","title":"Available commands"},{"location":"quickstart.html#cmsis-view","text":"The CMSIS view ( ) shows the content of the active projects in the solution. Each project contains configuration settings, source code files, build settings, and other project-specific information. The extension uses these settings and files to manage and build a software project for a board or device. The main area shows: Groups and files are added to the project by the user. constructed-files contains generated files such as the RTE_Components.h header file for each context. linker contains a linker script file and a <regions>.h file (or other user-defined header files). Components shows the software components selected for the project with their source files, user code templates, and APIs. Click the files to open them in the editor. Click the book icon of a component to open the related documentation. If you are using a generator to configure your device or board, then a Run Generator option is available to start a generator session. Layer Type (if available): The software layers in the project with their source files, preconfigured software components, and configuration files.","title":"CMSIS View"},{"location":"quickstart.html#status-bar","text":"The Visual Studio Code status bar displays information about the status of your development environment and the project. Depending on the number of installed extensions, you see something like the following: If you have a development board attached, the connected hardware is shown via the Arm Device Manager extension. Click to open the extension. Using the Arm Debugger extension, the current debug configuration is displayed. You can inspect errors and warnings for a context set. For active projects in the context set, errors and warnings display when you move your cursor over the Context Set in the status bar. The indicator is red for errors and yellow in case of warnings. Click the indicator to open the Output tab for the CMSIS Solution category. If you previously closed the Manage Solution view, then this action also re-opens the view. The Arm Environment Manager extension shows information about the number of installed tools. Hover over to review the list. Click it to get further options. If you are using licensed Arm tools, the active license is shown. Click it to manage the license.","title":"Status bar"},{"location":"runexternal.html","text":"Run External Tools VS Code uses the launch.json and tasks.json configuration files to integrate external tools. The following section shows how to configure these files for typical use cases. Variables provide access to parameters of the current active csolution project . Programmer ToDo show usage of command-line programmer (i.e. STCube Programmer) Debug Server ToDo show usage of Cortex Debug configured for JLink Using uVision for Debugging The \u00b5Vision Debugger offers advanced debug features such as Event Recorder and Component Viewer to analyze applications. To call \u00b5Vision with the csolution project that you are using in VS Code, add to the file .vscode\\tasks.json the following task. The command: is the path to the uVision executable on your computer. \"tasks\": [ { \"label\": \"Start uVision\", \"type\": \"process\", \"command\": \"C:\\\\Keil_v5\\\\UV4\\\\UV4.exe\", \"args\": [ \"${command:cmsis-csolution.getSolutionPath}\" ], \"problemMatcher\": [] } ] Variables VS Code supports variable substitution in launch.json and tasks.json configuration files as well as some select settings. In addition to the VS Code built-in variables , the CMSIS Solution extension provides the following variables to access parameters of the current active csolution project . Variable Description Example value cmsis-solution.getDfpName Name and version of the Device Family Pack (DFP) of the current active target. ARM::V2M_MPS3_SSE_300_DFP@1.5.0 cmsis-solution.getBspName Name and version of the Board Support Pack (BSP) of the current active target. ARM::V2M_MPS3_SSE_300_DFP@1.5.0 cmsis-solution.getDfpPath Path to Device Family Pack (DFP) file of the current active target. cmsis-solution.getBspPath Path to Board Support Pack (BSP) file of the current active target. cmsis-solution.getCbuildRunPath Path to the CMSIS-Toolbox *.cbuild-run.yml file of the current active target.","title":"Run external tools"},{"location":"runexternal.html#run-external-tools","text":"VS Code uses the launch.json and tasks.json configuration files to integrate external tools. The following section shows how to configure these files for typical use cases. Variables provide access to parameters of the current active csolution project .","title":"Run External Tools"},{"location":"runexternal.html#programmer","text":"ToDo show usage of command-line programmer (i.e. STCube Programmer)","title":"Programmer"},{"location":"runexternal.html#debug-server","text":"ToDo show usage of Cortex Debug configured for JLink","title":"Debug Server"},{"location":"runexternal.html#using-uvision-for-debugging","text":"The \u00b5Vision Debugger offers advanced debug features such as Event Recorder and Component Viewer to analyze applications. To call \u00b5Vision with the csolution project that you are using in VS Code, add to the file .vscode\\tasks.json the following task. The command: is the path to the uVision executable on your computer. \"tasks\": [ { \"label\": \"Start uVision\", \"type\": \"process\", \"command\": \"C:\\\\Keil_v5\\\\UV4\\\\UV4.exe\", \"args\": [ \"${command:cmsis-csolution.getSolutionPath}\" ], \"problemMatcher\": [] } ]","title":"Using uVision for Debugging"},{"location":"runexternal.html#variables","text":"VS Code supports variable substitution in launch.json and tasks.json configuration files as well as some select settings. In addition to the VS Code built-in variables , the CMSIS Solution extension provides the following variables to access parameters of the current active csolution project . Variable Description Example value cmsis-solution.getDfpName Name and version of the Device Family Pack (DFP) of the current active target. ARM::V2M_MPS3_SSE_300_DFP@1.5.0 cmsis-solution.getBspName Name and version of the Board Support Pack (BSP) of the current active target. ARM::V2M_MPS3_SSE_300_DFP@1.5.0 cmsis-solution.getDfpPath Path to Device Family Pack (DFP) file of the current active target. cmsis-solution.getBspPath Path to Board Support Pack (BSP) file of the current active target. cmsis-solution.getCbuildRunPath Path to the CMSIS-Toolbox *.cbuild-run.yml file of the current active target.","title":"Variables"},{"location":"tipsandtricks.html","text":"Tips and tricks This chapter contains useful information that is not used often, but helpful in case of certain problems. Initialize your solution Examples from keil.arm.com or solutions created from scratch from the Create Solution view are already initialized and contain all required files. If your solution does not contain the vcpkg-configuration.json , tasks.json , and launch.json files, use the Initialize CMSIS project option to generate them. Right-click anywhere in the workspace and select Initialize CMSIS project . The extension generates preconfigured files that are ready to use. Convert a Keil uVision project With the CMSIS Solution extension, you can convert Keil \u03bcVision project to a CMSIS solution. Open the folder that contains the *.uvprojx that you want to convert in Visual Studio Code. Alternatively, import a \u03bcVision project from keil.arm.com , or clone a project from GitHub. Right-click the *.uvprojx file and select Convert \u03bcVision project to CMSIS solution from the Explorer view. The conversion starts immediately. Alternatively, if you are starting from an empty workspace, you can click in the Activity Bar to open the CMSIS view. Then choose one of the following two options: Click Convert a \u03bcVision Project to CMSIS Solution and open your *.uvprojx file to convert it. Move your cursor over the Solution outline, click Views More Actions... , then select Convert \u03bcVision project to CMSIS solution and open your *.uvprojx file to convert it. A dialog box displays. You can carry out the following tasks: Open the solution in a new workspace with the Open option. Open the solution in a new window and new workspace with the Open project in new window option. You can also run the CMSIS: Convert \u03bcVision project to CMSIS solution command from the Command Palette. In that case, select the *.uvprojx that you want to convert on your machine and click Select. If there are conversion errors, check the uv2csolution.log file. Confirm that the Arm Tools Environment Manager extension can automatically activate the workspace and download the tools specified in your vcpkg-configuration.json file. Check the Output tab. In the View menu, select Output to open the Output tab. Select \u03bcVision to Csolution Conversion in the drop-down list on the right side of the Output tab. The *.cproject.yml and *.csolution.yml files are available in the folder where the *.uvprojx is stored. Attention The conversion does not work with Arm Compiler 5-based projects. Only projects using Arm Compiler 6 can be converted. As a workaround, you can update Arm Compiler 5 projects to Arm Compiler 6 in Keil \u03bcVision, then convert the projects to solutions in Visual Studio Code. For more information, see the Migrate Arm Compiler 5 to Arm Compiler 6 application note and the Arm Compiler for Embedded Migration and Compatibility Guide . Set current solution in workspace To activate a solution in the Solution outline view, use the Select solution from workspace option in Views and More Actions... .","title":"Tips and tricks"},{"location":"tipsandtricks.html#tips-and-tricks","text":"This chapter contains useful information that is not used often, but helpful in case of certain problems.","title":"Tips and tricks"},{"location":"tipsandtricks.html#initialize-your-solution","text":"Examples from keil.arm.com or solutions created from scratch from the Create Solution view are already initialized and contain all required files. If your solution does not contain the vcpkg-configuration.json , tasks.json , and launch.json files, use the Initialize CMSIS project option to generate them. Right-click anywhere in the workspace and select Initialize CMSIS project . The extension generates preconfigured files that are ready to use.","title":"Initialize your solution"},{"location":"tipsandtricks.html#convert-a-keil-uvision-project","text":"With the CMSIS Solution extension, you can convert Keil \u03bcVision project to a CMSIS solution. Open the folder that contains the *.uvprojx that you want to convert in Visual Studio Code. Alternatively, import a \u03bcVision project from keil.arm.com , or clone a project from GitHub. Right-click the *.uvprojx file and select Convert \u03bcVision project to CMSIS solution from the Explorer view. The conversion starts immediately. Alternatively, if you are starting from an empty workspace, you can click in the Activity Bar to open the CMSIS view. Then choose one of the following two options: Click Convert a \u03bcVision Project to CMSIS Solution and open your *.uvprojx file to convert it. Move your cursor over the Solution outline, click Views More Actions... , then select Convert \u03bcVision project to CMSIS solution and open your *.uvprojx file to convert it. A dialog box displays. You can carry out the following tasks: Open the solution in a new workspace with the Open option. Open the solution in a new window and new workspace with the Open project in new window option. You can also run the CMSIS: Convert \u03bcVision project to CMSIS solution command from the Command Palette. In that case, select the *.uvprojx that you want to convert on your machine and click Select. If there are conversion errors, check the uv2csolution.log file. Confirm that the Arm Tools Environment Manager extension can automatically activate the workspace and download the tools specified in your vcpkg-configuration.json file. Check the Output tab. In the View menu, select Output to open the Output tab. Select \u03bcVision to Csolution Conversion in the drop-down list on the right side of the Output tab. The *.cproject.yml and *.csolution.yml files are available in the folder where the *.uvprojx is stored. Attention The conversion does not work with Arm Compiler 5-based projects. Only projects using Arm Compiler 6 can be converted. As a workaround, you can update Arm Compiler 5 projects to Arm Compiler 6 in Keil \u03bcVision, then convert the projects to solutions in Visual Studio Code. For more information, see the Migrate Arm Compiler 5 to Arm Compiler 6 application note and the Arm Compiler for Embedded Migration and Compatibility Guide .","title":"Convert a Keil uVision project"},{"location":"tipsandtricks.html#set-current-solution-in-workspace","text":"To activate a solution in the Solution outline view, use the Select solution from workspace option in Views and More Actions... .","title":"Set current solution in workspace"}]}